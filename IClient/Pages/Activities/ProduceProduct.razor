@page "/produce"
@using IClient.UseCases
@using IClient.viewModels
@using Microsoft.AspNetCore.Components
@using IClient.BusinessCore

@attribute [Authorize]

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<h3>Produce Product</h3>
<br/>
@if (produceViewModel != null)
{
    <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="po">Production Number</label>
            <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="inv">Product to Produce</label>
            <ViewProductsComponent 
                OnSelectProduct="OnSelectProduct"
                DisplaySearchResult="true"></ViewProductsComponent>                   
            <InputText id="inv" class="form-control" @bind-Value="produceViewModel.ProductName" disabled></InputText>            
            <input type="hidden" value="@produceViewModel.ProductId" />  
            @if (selectedProduct != null)
            {
                <div style="margin-top:3px">
                    <text>Price: $</text>
                    @selectedProduct?.Price.ToString()
                </div>                
            }
            
        </div>

        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
        </div>
        <br/>
        <button type="submit" class="btn btn-primary">Produce</button>

    </EditForm>
}

@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct;
    private string errorMessage;

    private async Task OnValidSubmit()
    {
        if (!await ValidateEnoughInventoriesForProducingUseCase.ExecuteAsync(this.selectedProduct, this.produceViewModel.QuantityToProduce))
        {
            errorMessage = $"Нет столько деталей, чтобы собрать {this.selectedProduct.ProductName} {this.produceViewModel.QuantityToProduce} раз";

            return;
        }
        else
        {
            //errorMessage = string.Empty;
        }

        await ProduceProductUseCase.ExecuteAsync(
            this.produceViewModel.ProductionNumber,
            this.selectedProduct,
            this.produceViewModel.QuantityToProduce,
            "Vlad"
        );

        this.produceViewModel = new ProduceViewModel();
       this.selectedProduct = null;
        this.errorMessage = string.Empty;
    }

    public void OnSelectProduct(Product product)
    {
        this.selectedProduct = product;
        produceViewModel.ProductId = product.ProductId;
        produceViewModel.ProductName = product.ProductName;
    }
}