@page "/inventories"
@using IClient.BusinessCore
@using IClient.UseCases
@inject NavigationManager nav
@inject IViewInventoryByNameUseCase ViewInventoryByNameUseCase
@attribute [Authorize]


<h3>Список комплектующих</h3>
<br/>
<ViewInventoriesComponent OnSearchInventories="OnSearchInventories"></ViewInventoriesComponent>
<br/>

@if (listInventories != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Название</th>
            <th>Кол-во</th>
            <th>Цена</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var inv in this.listInventories)
            {
                <InventoryItemComponent
                    Inventory="inv"
                    OnInventoryDeleted="OnInventoryDeleted">
                </InventoryItemComponent>
            }
        </tbody>
    </table>
}
<button type="button" class="btn btn-outline-primary mt-3" @onclick="AddInventory">Добавить предмет</button>

@code {
    private List<Inventory>? listInventories;
    private Inventory inv;
    
    protected override async Task OnInitializedAsync()
    {
        var invs = await ViewInventoryByNameUseCase.ExecuteAsync();
        this.listInventories = invs.ToList();
    }

    private void OnSearchInventories(List<Inventory> inventories)
    {
        listInventories = inventories;
    }

    private void AddInventory()
    {
        nav.NavigateTo("/addinventory");
    }

    private void OnSelectInventory(Inventory inventory)
    {
        inv = inventory;
    }
    
    private async Task OnInventoryDeleted()
    {
        await LoadInventory();
    }

    private async Task LoadInventory()
    {
        var invs = await ViewInventoryByNameUseCase.ExecuteAsync();
        this.listInventories = invs.ToList();
    }

}