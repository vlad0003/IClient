@page "/addproduct"
@using IClient.BusinessCore
@using IClient.UseCases
@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager nav

<h3>Add Product</h3>
<br/>
@if (this.product != null)
{
    <div>
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>
        
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent 
            @ref="ProductInventoriesComponent"
            OnInventorySelected="OnInventorySelected"
            ></ProductInventoriesComponent>
        
        <br/>
        <button type="submit" class="btn btn-outline-success mt-3">Save</button>
    </EditForm>
    </div>
}




@code {
    private Product? product;
    private ProductInventoriesComponent ProductInventoriesComponent;

    protected override void OnInitialized()
    {
        product = new Product();
    }

    private async Task OnValidSubmit()
    {
        if (this.product != null)
        {
            this.ProductInventoriesComponent.productInventories.ForEach(x =>
            {
                x.InventoryId = this.product.ProductId;
            });
           //  this.product.ProductInventories = this.ProductInventoriesComponent.productInventories;
            await AddProductUseCase.ExecuteAsync(this.product);
            nav.NavigateTo("/products");
        }
    }

    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }

}