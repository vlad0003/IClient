@page "/editproduct/{id:int}"
@using IClient.UseCases
@using IClient.BusinessCore
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager nav
@attribute [Authorize]
<br/>

@if (this.product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Название</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>
        
        <div class="form-group">
            <label for="qty">Кол-во</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        
        <div class="form-group">
            <label for="price">Цена</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent
            productInventories="product.ProductInventories"
            OnInventorySelected="OnInventorySelected"
        ></ProductInventoriesComponent>
        
        <br/>
        <button type="submit" class="btn btn-outline-success mt-3">Save</button>
    </EditForm>
}


@code {
    private Product product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }

    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }

    public void OnValidSubmit()
    {
        EditProductUseCase.ExecuteAsync(this.product);
        nav.NavigateTo("/products");
    }

}