@using IClient.BusinessCore
@using IClient.Pages
        <div class="form-group">
            <label>Inventories</label>
            <ViewInventoriesComponent
                DisplaySearchResult="true"
                OnSelectInventory="OnSelectInventory"
            ></ViewInventoriesComponent>
        </div>
        @if (productInventories != null && productInventories.Count > 0)
        {
            <table class="table-striped">
                <thead>
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        Quantity
                    </th>
                </tr>
                </thead>
                <tbody>
                @foreach (var productInventory in this.productInventories)
                {
                    <tr>
                        <td>
                            @productInventory.Inventory.Inventoryname
                        </td>
                        <td>
                            <input type="number" min=0 max=@productInventory.Inventory.Quantity 
                                @bind-value="productInventory.InventoryQuantity"
                                   @bind-value:event="oninput"
                                   @onchange="OnInventoryQtyChanged"/>
                        </td>
                        <td>
                            <button class="btn btn-link" type="button" @onclick="@(() => RemoveInventory(productInventory))">Удалить</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>            
        }


@code {
     
    [Parameter]
    public EventCallback<List<ProductInventory>> OnInventorySelected { get; set; }

    [Parameter]
    public List<ProductInventory> productInventories { get; set; } = new List<ProductInventory>();

    private async Task OnInventoryQtyChanged()
    {
        await OnInventorySelected.InvokeAsync(this.productInventories);
    }
    
    private async Task OnSelectInventory(Inventory inventory)
            {
                if (!productInventories.Any(x => x.Inventory.Inventoryname.Equals(inventory.Inventoryname, StringComparison.OrdinalIgnoreCase)))
                {
                    this.productInventories.Add(new ProductInventory {InventoryId = inventory.InventoryId,Inventory = inventory});
                }

                await OnInventorySelected.InvokeAsync(this.productInventories);
            }

            private void RemoveInventory(ProductInventory productInventory)
            {
                this.productInventories.Remove(productInventory);
            }

        }